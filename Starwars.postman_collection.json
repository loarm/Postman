{
	"info": {
		"_postman_id": "800fcb5b-6616-48ff-8008-6b40afac6679",
		"name": "Starwars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SW tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check correct response format\r",
							"pm.test(\"Check correct response format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"}); \r",
							"\r",
							"// Check that we have all declared fields in response \r",
							"pm.test(\"Check that we have all declared fields\", function(){\r",
							"    const jsonData = pm.response.json()\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"\r",
							"// Check that field value is not NULL\r",
							"pm.test('Check that field value is not NULL', function() {\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.vehicles).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);\r",
							"})\r",
							"\r",
							"// Check that field value is not empty\r",
							"pm.test('Check that field value is not empty', function() {\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\");\r",
							"});\r",
							"\r",
							"// Check that field corresponds to a specific value\r",
							"pm.test(\"Check that field corresponds to a specific value\", function() {\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							"});\r",
							"\r",
							"\r",
							"// Status code is 200 and OK\r",
							"pm.test(\"Status code is 200 and OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"// Response time less than 1000ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// There is a specific header in response\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"//The response has a specific header with a specific value\r",
							"pm.test(\"The response has a specific header with a specific value\", function(){\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"//Cookie exists\r",
							"pm.test('Cookie exists', function() {\r",
							"    pm.cookies.has()\r",
							"});\r",
							"\r",
							"//Cookie has value\r",
							"pm.test(\"Cookie has value\", function() {\r",
							"    try{\r",
							"        var MY_COOKIE = pm.cookies.has(\"\")\r",
							"        console.log(MY_COOKIE);\r",
							"    }\r",
							"    catch(e) {\r",
							"        console.log(\"SOME PLOBLEM WITH COOKIE ->\" + e)\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		}
	]
}